name: Deploy to AWS

on:
  push:
    branches:
      - production
      - staging
      - env-setup

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch GitHub Actions runner IP
        run: |
          echo "Fetching runner IP..."
          RUNNER_IP=$(curl -s http://checkip.amazonaws.com)
          if [[ -z "$RUNNER_IP" ]]; then
            echo "Failed to fetch runner IP" >&2
            exit 1
          fi
          echo "Runner IP is $RUNNER_IP"
          echo "RUNNER_IP=$RUNNER_IP" >> $GITHUB_ENV

      - name: Set up AWS CLI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws --version
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION

      - name: Set environment variables based on branch
        run: |
          if [[ "$GITHUB_REF" == "refs/heads/env-setup" ]]; then
            echo "Setting production environment"
            echo "USERNAME=${{ secrets.PROD_USERNAME }}" >> $GITHUB_ENV
            echo "HOST=${{ secrets.PROD_FE_HOST }}" >> $GITHUB_ENV
            echo "SECURITY_GROUP_ID=${{ secrets.PROD_SECURITY_GROUP_ID }}" >> $GITHUB_ENV
          elif [[ "$GITHUB_REF" == "refs/heads/staging" ]]; then
            echo "Setting staging environment"
            echo "USERNAME=${{ secrets.STAGING_USERNAME }}" >> $GITHUB_ENV
            echo "HOST=${{ secrets.STAGING_HOST }}" >> $GITHUB_ENV
            echo "SECURITY_GROUP_ID=${{ secrets.STAGING_SECURITY_GROUP_ID }}" >> $GITHUB_ENV
          else
            echo "Unsupported branch" >&2
            exit 1
          fi

      - name: Allow SSH access from GitHub Actions runner IP
        run: |
          echo "Security Group ID: $SECURITY_GROUP_ID"
          aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr $RUNNER_IP/32 || echo "SSH rule already exists."

      - name: Set up SSH connection
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: |
            ${{ (github.ref == 'refs/heads/env-setup' && secrets.PROD_SSH_KEY) || 
                (github.ref == 'refs/heads/staging' && secrets.STAGING_SSH_KEY) }}
      
      - name: Deploy Application
        run: |
          # Extract branch name from GITHUB_REF
          BRANCH=$(echo $GITHUB_REF | sed 's/refs\/heads\///')

          echo "Deploying branch: $BRANCH"
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST << 'EOF'
            set -e  # Exit immediately if any command fails

            # Only deploy frontend (bungalow-fe)
            echo "Changing to the project directory for bungalow-fe..."
            cd /home/ubuntu/bungalow-fe

            echo "Pulling the latest code from branch: $BRANCH"
            git pull origin $BRANCH || (
              echo "Git pull failed. Stashing changes and retrying..." &&
              git stash &&
              git pull origin $BRANCH
            )

            echo "Installing dependencies for frontend..."
            npm i

            echo "Building frontend application..."
            if [[ "$GITHUB_REF" == "refs/heads/env-setup" ]]; then
              echo "Building frontend application for $BRANCH production..."
              npm run build
              echo "Copy build packages directory dist/ to web server directory"
              sudo cp -r /var/www/html
            elif [[ "$GITHUB_REF" == "refs/heads/staging" ]]; then
              echo "Building frontend application for staging..."
              npm run build:staging
              echo "Copy build packages directory dist/ to web server directory"
              sudo cp -r /var/www/html
            else
              echo "Unknown branch $BRANCH. Skipping build process."
              exit 1
            fi

            echo "Deployment of branch $BRANCH completed successfully!"
          EOF

      - name: Revert AWS Security Group rule
        if: always()
        run: |
          echo "Reverting SSH rule in AWS security group."
          aws ec2 revoke-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr $RUNNER_IP/32 || echo "SSH rule already removed."